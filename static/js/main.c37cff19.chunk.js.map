{"version":3,"sources":["components/Label.js","App.js","serviceWorker.js","index.js"],"names":["Label","props","react_default","a","createElement","htmlFor","id","children","className","class","type","value","onChange","change","label","error","App","state","username","email","password","checkbox","showPopup","checkStatus","handleChange","e","target","name","_this","setState","Object","defineProperty","handleCheckProperits","_this$state","test","handleSubmitForm","preventDefault","setTimeout","window","location","reload","_this$state$checkStat","this","onSubmit","noValidate","src_components_Label","checked","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c37cff19.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Label.css';\r\n\r\nconst Label = (props) => {\r\n    return ( \r\n        <label htmlFor={props.id}>{props.children}\r\n            <input\r\n              className={props.class}\r\n              type={props.type}\r\n              id={props.id}\r\n              value={props.value}\r\n              onChange={props.change}\r\n            />\r\n            {!props.label ? <p className=\"error\">{props.error}</p> : null}\r\n          </label>\r\n     );\r\n}\r\n \r\nexport default Label;","import React, { Component } from 'react';\nimport './App.css';\nimport Label from './components/Label';\n\nclass App extends Component {\n  state = {\n    username: '',\n    email: '',\n    password: '',\n    checkbox: false,\n    showPopup: false,\n    checkStatus: {\n      username: true,\n      email: true,\n      password: true,\n      checkbox: true,\n    }\n  }\n\n  handleChange = (e) => {\n    const value = e.target.value;\n    const type = e.target.type;\n    const name = e.target.id;\n    if(type === 'checkbox'){\n      this.setState({\n        [name]: !this.state.checkbox\n      })\n    } else {\n      this.setState({\n        [name]: value\n      })\n    }\n  }\n\n  handleCheckProperits = () => {\n    const {username, email, password, checkbox} = this.state;\n    let checkStatus = this.state.checkStatus;\n    const  regExpUsername  =  /^[a-zA-Z0-9\\\\?]{3,20}$/;\n    const  regExpEmail  =  /\\S+@\\S+\\.\\S+/;\n    const  regExpPassword  =  /^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/;\n\n    // check username\n    if(regExpUsername.test(username)){\n      checkStatus.username = true;\n    } else {\n      checkStatus.username = false;\n    }\n\n    // check email\n    if(regExpEmail.test(email)){\n      checkStatus.email = true;\n    } else {\n      checkStatus.email = false;\n    }\n\n    // check password\n    if(regExpPassword.test(password)){\n      checkStatus.password = true;\n    } else {\n      checkStatus.password = false;\n    }\n\n    // check checkbox\n    if(checkbox){\n      checkStatus.checkbox = true;\n    } else {\n      checkStatus.checkbox = false;\n    }\n\n    this.setState({\n      checkStatus\n    })\n\n    if(checkStatus.username && checkStatus.password && checkStatus.email && checkStatus.checkbox){\n      return true;\n    } else{\n      return false;\n    }\n  }\n\n  handleSubmitForm = (e) => {\n    e.preventDefault();\n    const result = this.handleCheckProperits();\n    if(result){\n      this.setState({\n        showPopup: true\n      })\n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n    }\n  }\n\n  render() {\n    const {username, email, password, checkbox} = this.state.checkStatus;\n    return (\n      <main className=\"main\">\n        <form className=\"form\" onSubmit={this.handleSubmitForm} noValidate>\n        <Label\n          id=\"username\"\n          class=\"input\"\n          type=\"text\"\n          value={this.state.username}\n          change={this.handleChange}\n          label={username}\n          error='Enter correct name!'\n        >Name</Label>\n\n        <Label\n          id=\"email\"\n          class=\"input\"\n          type=\"email\"\n          value={this.state.email}\n          change={this.handleChange}\n          label={email}\n          error='Email must contain the @ symbol!'\n        >Email</Label>\n\n        <Label\n          id=\"password\"\n          class=\"input\"\n          type=\"password\"\n          value={this.state.password}\n          change={this.handleChange}\n          label={password}\n          error='Password must have minimum 8 letters, with at least a symbol, upper and lower case letters and a number!'\n        >Password</Label>\n\n        <label className=\"label-checkbox\" htmlFor=\"checkbox\"> \n          <input \n            className=\"input checkbox\"\n            type=\"checkbox\"\n            id=\"checkbox\"\n            value={this.state.checkbox}\n            onChange={this.handleChange}\n            checked={this.state.checkbox}\n            />\n          I agree to the Terms and Conditions\n        </label>\n\n        {!checkbox ? <p className=\"error error--checkbox\">Checkbox is required!</p> : null}\n        <input className=\"submit\" type=\"submit\" value=\"send\"/>\n        </form>\n        {this.state.showPopup ? <div className=\"popup\">The form has been sent</div> : null }\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}